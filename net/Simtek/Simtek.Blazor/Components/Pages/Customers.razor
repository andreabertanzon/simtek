@page "/customers"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Simtek.Domain
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IMediator _mediator
@inject NavigationManager NavigationManager

<PageTitle>Clienti</PageTitle>

<h1>Clienti</h1>

@if (_customers == null)
{
    <p>
        <em>Caricamento...</em>
    </p>
}
else
{
    <div class="flex-column my-2">
        <input class="form-control" placeholder="Cerca..." type="search" @bind="_nameFilter" @bind:event="oninput" autofocus/>
    </div>
    <QuickGrid Class="table" Items="FilteredCustomers" Pagination="_state">
        <TemplateColumn Title="Azioni Cliente" Context="customer">
            <div class="flex flex-row align-content-center justify-content-center">
                <button class="btn btn-dark" @onclick="() => NavigateToEditCustomer(customer.Id)">
                    <i class="bi bi-pencil-square"></i>
                </button>
                <button class="btn btn-secondary" @onclick="() => NavigateToCustomerInfo(customer.Id)">
                    <i class="bi bi-info-square"></i>
                </button>
            </div>
        </TemplateColumn>
        <PropertyColumn Property="customer => customer.Name" Sortable="true">
        </PropertyColumn>
        <PropertyColumn Property="customer => customer.Surname" Sortable="true"/>
        <PropertyColumn Property="customer => customer.Address"/>
        <PropertyColumn Property="customer => customer.City"/>
        <PropertyColumn Property="customer => customer.Zip"/>
        <PropertyColumn Property="customer => customer.Email"/>
        <PropertyColumn Property="customer => customer.Phone"/>
        <PropertyColumn Property="customer => customer.Vat"/>

    </QuickGrid>
    <Paginator State="_state"/>
    <button class="btn btn-primary" @onclick="() => NavigateToEditCustomer(-1)"><i class="bi bi-journal-plus"></i> Crea Cliente</button>
}

@code {
    private IQueryable<Customer>? _customers;

    private IQueryable<Domain.Customer>? FilteredCustomers => _customers?.Where(x =>
        (x.Name != null && x.Name.Contains(_nameFilter, StringComparison.OrdinalIgnoreCase)) ||
        x.Surname.Contains(_nameFilter, StringComparison.OrdinalIgnoreCase));

    private PaginationState _state = new() { ItemsPerPage = 10 };
    private string _nameFilter = "";

    protected override async Task OnInitializedAsync()
    {
        (await _mediator.Send(new GetCustomersQuery())).When(
            onSuccess: x => this._customers = x.AsQueryable(),
            onFailure: x =>
            {
                Console.WriteLine(x);
                _customers = Array.Empty<Domain.Customer>().AsQueryable();
            });
    }

    private void NavigateToEditCustomer(int? id)
    {
        NavigationManager.NavigateTo($"EditCustomer/{id}");
    }

    private void NavigateToCustomerInfo(int? id)
    {
        NavigationManager.NavigateTo($"CustomerInfo/{id}");
    }

}