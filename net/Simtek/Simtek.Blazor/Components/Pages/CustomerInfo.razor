@page "/CustomerInfo/{Id:int}"
@using Simtek.Domain
@using Microsoft.AspNetCore.Components.QuickGrid
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IMediator _mediator
@inject NavigationManager NavigationManager
@inject ILogger<CustomerInfo> _logger

<h3 class="mb-4">@Customer?.FullName</h3>

<div>
    <table class="table">
        <tr class="py-2">
            <th scope="row">Nome</th>
            <td>@Customer?.Name</td>
        </tr>
        <tr>
            <th scope="row">Cognome</th>
            <td>@Customer?.Surname</td>
        </tr>
        <tr>
            <th scope="row">Indirizzo</th>
            <td>@Customer?.Address</td>
        </tr>
        <tr>
            <th scope="row">Città</th>
            <td>@Customer?.City</td>
        </tr>
        <tr>
            <th scope="row">CAP</th>
            <td>@Customer?.Zip</td>
        </tr>
        <tr>
            <th scope="row">Email</th>
            <td>@Customer?.Email</td>
        </tr>
        <tr>
            <th scope="row">Telefono</th>
            <td>@Customer?.Phone</td>
        </tr>
        <tr>
            <th scope="row">Partita IVA</th>
            <td>@Customer?.Vat</td>
        </tr>
    </table>
</div>
@if (Customer?.Sites.Any() ?? false)
{
    <h3 class="mt-5">Cantieri</h3>
    <div>
        <table class="table table-hover">
            <thead>
            <tr>
                <th>Azioni</th>
                <th>Nome</th>
                <th>Indirizzo</th>
                <th>Città</th>
                <th>CAP</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var site in Customer?.Sites ?? [])
            {
                <tr>

                    <td>
                        <i class="bi bi-pencil-square" @onclick="() => AddSite(site.Id)"></i>
                    </td>
                    <td>@site.Name</td>
                    <td>@site.Address</td>
                    <td>@site.City</td>
                    <td>@site.ZipCode</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}
<button class="btn btn-primary" @onclick="() => AddSite(-1)"><i class="bi bi-journal-plus"></i> Aggiungi Cantiere</button>

<h3 class="my-5">Interventi</h3>

<QuickGrid class="table" Pagination="_state" ItemsProvider="InterventionsProvider">
    <TemplateColumn Title="Azioni" Context="intervention">
        <div class="flex flex-row align-content-center justify-content-center">
            <button class="btn btn-dark" @onclick="() => NavigateToEditIntervention(intervention.Id)">
                <i class="bi bi-pencil-square"></i>
            </button>
            <button class="btn btn-secondary" @onclick="() => NavigateToInterventionInfo(intervention.Id)">
                <i class="bi bi-info-square"></i>
            </button>
        </div>
    </TemplateColumn>
    <PropertyColumn Title="Data" Property="intervention => intervention.ItalianDate" Sortable="true"/>
    <PropertyColumn Title="Cantiere" Property="intervention => intervention.Site.Name" Sortable="true"/>
    @* <PropertyColumn Title="Resoconto Generato" Property="intervention => intervention.ReportGenerated" Sortable="true"/> *@
    <TemplateColumn Title="Resoconto" Context="intervention">
        @if(intervention.ReportGenerated)
        {
            <button class="btn btn-primary"><i class="bi bi-check-square"></i></button>       }
        else
        {
           <button class="btn btn-danger disabled"><i class="bi bi-x-square"></i></button>
        }
    </TemplateColumn>
</QuickGrid>
<Paginator State="_state"/>

@code {
    [Parameter] public int Id { get; set; }
    Customer? Customer { get; set; }
    IQueryable<Intervention>? Interventions { get; set; }
    GridItemsProvider<Intervention>? InterventionsProvider; 
    private PaginationState _state = new() { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        var getCustomerOperation = await _mediator.Send(new GetCustomerQuery() { Id = Id });
        getCustomerOperation.WhenAsync(
            onSuccess: async c =>
            {
                Customer = await c;

                var getInterventionsOperation = await _mediator.Send(new GetInterventionsQuery()
                {
                    CustomerId = Id,
                    IncludeCustomer = false,
                    Page = _state.CurrentPageIndex,
                    PageSize = _state.ItemsPerPage
                });
                
                getInterventionsOperation.When(
                    onSuccess: x => Interventions = x.AsQueryable(),
                    onFailure: e => Console.WriteLine(e)
                );
                
                InterventionsProvider = async req =>
                {
                    var interventions = await GetInterventions(req.StartIndex, req.Count ?? 10);
                    return GridItemsProviderResult.From(items: interventions, totalItemCount: interventions.Count);
                };
            },
            onFailure: e => Console.WriteLine(e)
        );
    }
    
    public async Task<List<Intervention>> GetInterventions(int pageNumber, int pageSize)
    {
        var getInterventionsOperation = await _mediator.Send(new GetInterventionsQuery()
        {
            CustomerId = Id,
            IncludeCustomer = false,
            Page = pageNumber,
            PageSize = pageSize
        });

        List<Intervention> interventions = [];
                
        getInterventionsOperation.When(
            onSuccess: x => interventions = x.ToList(),
            onFailure: e => Console.WriteLine(e)
        );
        return interventions;
    }

    private async Task AddSite(int i)
    {
        if (Customer != null) NavigationManager.NavigateTo($"/EditSite/{Customer.Id}/{i}");
    }

    private Task NavigateToEditIntervention(int interventionId)
    {
        throw new NotImplementedException();
    }

    private Task NavigateToInterventionInfo(int interventionId)
    {
        throw new NotImplementedException();
    }

}