@page "/EditCustomer/{Id:int}"
@using Simtek.Application.Commands
@using Simtek.Domain
@using Simtek.Blazor.Components.Reusables
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject NavigationManager NavigationManager
@inject IMediator _mediator
@if (Id == -1)
{
    <h3>Crea Cliente</h3>
}
else
{
    <h3>Modifica Cliente</h3>
}

<CustomerForm customer="Customer" OnSubmit="c=>HandleSubmit(c)" />

@code {
    [Parameter] public int? Id { get; set; }
//   private EditContext? editContext;

    Customer Customer { get; set; } = new()
    {
        Name = string.Empty,
        Id = 0,
        Surname = string.Empty
    };

    // private ValidationMessageStore? messageStore;

    protected override async Task OnInitializedAsync()
    {
        if (Id != -1)
        {
            var getCustomerOperation = await _mediator.Send(new GetCustomerQuery() { Id = Id.Value });
            getCustomerOperation.When(
                onSuccess: c => Customer = c,
                onFailure: e => Console.WriteLine(e)
            );
        }
        else
        {
            Customer = new Customer
            {
                Id = 0,
                Surname = string.Empty
            };
        }
    }


    private async Task HandleSubmit(Customer customer)
    {
        var result = await _mediator.Send(new CreateCustomerCommand() { Customer = customer });
        result.When(
            onSuccess: (x) => NavigationManager.NavigateTo("customers"),
            onFailure: e => Console.WriteLine(e)
        );
        NavigationManager.NavigateTo("customers");
    }

}